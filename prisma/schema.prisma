// Prisma schema for HotelSaver.ng

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum City {
  Lagos
  Abuja
  PortHarcourt
  Owerri
}

enum HotelType {
  Hotel
  Apartment
}

enum PriceSource {
  SHELF
  DISCOUNT
  NEGOTIATED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  INITIATED
  PAID
  FAILED
  REFUNDED
}

model Hotel {
  id               String      @id @default(cuid())
  slug             String      @unique
  name             String
  city             City
  type             HotelType
  stars            Int
  active           Boolean     @default(true)
  // Pricing
  shelfPriceNGN    Int         // regular shelf price
  discountPriceNGN Int?        // optional fixed discount shelf
  discountRatePct  Int?        // optional discount rate (0..100)
  negotiationEnabled Boolean   @default(true)
  negotiationMinPct Int?       // e.g., 5 means 5%
  negotiationMaxPct Int?       // e.g., 40 means 40%

  images           HotelImage[]
  availability     Availability[]
  bookings         Booking[]
  negotiations     Negotiation[]

  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model HotelImage {
  id       String  @id @default(cuid())
  hotelId  String
  url      String
  sortOrder Int     @default(0)

  hotel    Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Availability {
  id             String   @id @default(cuid())
  hotelId        String
  date           DateTime // date-only (treat time as 00:00)
  roomsAvailable Int

  hotel          Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@unique([hotelId, date])
}

model Negotiation {
  id           String   @id @default(cuid())
  hotelId      String
  discountPct  Int?     // 0..100
  priceNGN     Int      // negotiated price offered
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  hotel        Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Booking {
  id           String       @id @default(cuid())
  hotelId      String
  checkIn      DateTime
  checkOut     DateTime
  rooms        Int          @default(1)
  adults       Int          @default(1)
  children     Int          @default(0)
  priceNGN     Int
  priceSource  PriceSource
  taxNGN       Int          @default(0)
  totalNGN     Int
  status       BookingStatus @default(PENDING)
  contactEmail String?
  contactPhone String?
  createdAt    DateTime     @default(now())

  hotel        Hotel        @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  payments     Payment[]
}

model Payment {
  id         String        @id @default(cuid())
  bookingId  String
  provider   String        // e.g., Paystack
  amountNGN  Int
  currency   String        @default("NGN")
  status     PaymentStatus @default(INITIATED)
  reference  String?       @unique
  paidAt     DateTime?
  raw        Json?

  booking    Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

// Lightweight standalone payment intent used for flows that don't persist a Booking yet
model PaymentIntent {
  id          String        @id @default(cuid())
  provider    String        // e.g., Paystack
  amountNGN   Int
  currency    String        @default("NGN")
  email       String
  reference   String?       @unique
  status      PaymentStatus @default(INITIATED)
  propertyId  String?
  context     Json?
  paidAt      DateTime?
  raw         Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// === SERVICE AVAILABILITY MODELS ===

enum ServiceCategory {
  Hair
  Nails
  Massage
  Cleaning
  Security
  Catering
  Chef
  CarHire
  Guide
  Photography
  Livestock
  Braiding
  DryFoodsAndPackaging
  DryCleaningAndWashServices
  FurnitureRentals
  SoundAndLightRentals
  EntertainmentServices
  EventTransportation
}

enum ServiceType {
  HIRE      // Limited quantity items (chairs, canopy)
  SERVICE   // Unlimited capacity services (massage, photography)
}

model Service {
  id               String          @id @default(cuid())
  title            String
  category         ServiceCategory
  type             ServiceType     @default(SERVICE)
  city             City
  provider         String
  description      String?
  amountNGN        Int
  rating           Float           @default(4.5)
  images           String[]        // JSON array of image URLs
  active           Boolean         @default(true)
  
  // Hire-specific fields
  quantityTotal    Int?            // Total units available (for HIRE type)
  quantityUnit     String?         // "tables", "chairs", "canopies"
  hireDurationHrs  Int?            // Standard hire duration
  
  availability     ServiceAvailability[]
  bookings         ServiceBooking[]
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model ServiceAvailability {
  id               String   @id @default(cuid())
  serviceId        String
  date             DateTime // date-only (treat time as 00:00)
  quantityAvailable Int     // Available units for this date
  
  service          Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@unique([serviceId, date])
}

model ServiceBooking {
  id               String       @id @default(cuid())
  serviceId        String
  eventDate        DateTime
  eventTime        String?      // "Morning", "Afternoon", "Evening"
  quantity         Int          @default(1)
  durationHrs      Int?         // For hire services
  priceNGN         Int
  totalNGN         Int
  status           BookingStatus @default(PENDING)
  
  // Contact information
  customerName     String
  customerEmail    String
  customerPhone    String
  eventLocation    String?
  specialRequests  String?
  
  service          Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// === FOOD ORDERS (optional persistence used by /api/food/order) ===
model FoodOrder {
  id              String         @id @default(cuid())
  reference       String         @unique

  restaurantId    String
  restaurantName  String
  city            String         // Keep as string to align with JSON values (e.g., "Port Harcourt")

  contactName     String
  contactPhone    String
  contactAddress  String?

  items           Json           // Ordered items payload
  discountPct     Int
  deliveryFee     Int
  deliveryWindow  String         // "Morning" | "Afternoon" | "Evening" | "Scheduled"
  scheduleDate    String?
  scheduleTime    String?

  total           Int
  status          BookingStatus  @default(PENDING)

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([createdAt])
}

// === NextAuth models (for Email magic links & OAuth) ===
// These models follow the official NextAuth Prisma schema for v4
// Docs: https://authjs.dev/reference/adapter/prisma

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
